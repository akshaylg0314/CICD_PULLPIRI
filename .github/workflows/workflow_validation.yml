# name: Workflow YAML Validation

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     paths:
#       - '.github/workflows/*.yml' # Trigger only when workflow files change

# jobs:
#   validate_yaml:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Validate workflow YAML syntax
#         # This step is a general way to check YAML syntax.
#         # GitHub Actions inherently validates YAML when parsing.
#         # For more in-depth validation, you might use a linter specifically for GitHub Actions YAML.
#         run: |
#           echo "Checking YAML syntax..."
#           # A simple way to check if the YAML is parsable (will fail if not)
#           for file in .github/workflows/*.yml; do
#             yq --version > /dev/null 2>&1 || { echo >&2 "yq not installed. Aborting."; exit 1; }
#             yq eval '.' "$file" > /dev/null
#             if [ $? -ne 0 ]; then
#               echo "Error: Invalid YAML in $file"
#               exit 1
#             fi
#             echo "Successfully validated $file"
#           done
#       #- name: Run main CI (for logic changes)
#         # It's good practice to run your regular CI even if only workflow files change,
#         # to ensure the changes to the CI itself don't break the build.
#       #  uses: ./.github/workflows/pull_req.yml # Reusable workflow or call steps directly
#         # You would typically have this as a separate job or call a reusable workflow
#         # if your main CI is very large.
#         # For this example, we'll assume a direct call if that was a reusable workflow.
#         # If not, you'd replicate the core build/test/lint steps here.
name: Validate Workflow Syntax

on:
  pull_request:
    branches: [main]
    paths:
      - '.github/workflows/*.yml'

jobs:
  run-yaml-validation:
    uses: ./.github/workflows/run-validate.yml